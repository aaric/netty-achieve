plugins {
    id "java"
    id "io.freefair.lombok" version "6.3.0" apply false
    id "io.spring.dependency-management" version "1.0.11.RELEASE" apply false
    id "org.springframework.boot" version "2.3.12.RELEASE" apply false
    id "com.google.protobuf" version "0.8.18" apply false
}

allprojects {
    group = "com.sample"
    version = "2.0.0-SNAPSHOT"

    ext {
        // https://github.com/alibaba/spring-cloud-alibaba/wiki/版本说明#毕业版本依赖关系推荐使用
        springCloudVersion = "Hoxton.SR12"
        springCloudAlibabaVersion = "2.2.7.RELEASE"

        // https://github.com/grpc/grpc-java/tree/v1.34.x#generated-code
        protobufVersion = "3.12.0"
        grpcVersion = "1.34.1"
    }

    repositories {
        maven { url "https://maven.aliyun.com/repository/public" }
        maven { url "https://repository.incarcloud.com/content/groups/public" }
    }
}

subprojects {
    apply plugin: "java"
    apply plugin: "checkstyle"
    apply plugin: "io.freefair.lombok"
    apply plugin: "io.spring.dependency-management"

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    configurations {
        /*developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }*/
        all {
            exclude group: "org.slf4j", module: "slf4j-log4j12"
        }
    }

    dependencies {
        implementation "org.slf4j:slf4j-api"

        testImplementation("org.springframework.boot:spring-boot-starter-test") {
            exclude group: "org.junit.vintage", module: "junit-vintage-engine"
        }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
            mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:$springCloudAlibabaVersion"
        }

        dependencies {
            dependencySet(group: "org.slf4j", version: "1.7.32") {
                entry "slf4j-api"
                entry "slf4j-simple"
                entry "slf4j-log4j12"
            }

            dependency "org.apache.commons:commons-io:1.3.2"
            dependency "org.apache.commons:commons-lang3:3.12.0"

            dependency "io.netty:netty-all:4.1.65.Final"

            dependency "com.github.ioprotocol:com-github-ioprotocol:1.2.0"
        }
    }

    compileJava {
        options.encoding = "UTF-8"
        options.compilerArgs << "-Xlint:unchecked"
    }

    compileTestJava {
        options.encoding = "UTF-8"
        options.compilerArgs << "-Xlint:unchecked"
    }

    test {
        useJUnitPlatform()
    }

    task checkstyle(type: Checkstyle) {
        source = "src"
        include "**/*.java"
        ignoreFailures false
    }

    task removeLombokConfig() {
        def subProjectPath = project.projectDir
        if (null != subProjectPath) {
            def lombokConfigFile = new File(subProjectPath, "lombok.config")
            if (lombokConfigFile.exists()) {
                lombokConfigFile.delete()
            }
        }
    }

    task removeOutputLog() {
        def subProjectPath = project.projectDir
        if (null != subProjectPath) {
            subProjectPath.list().each { filename ->
                if (filename.endsWith(".log") || filename.equalsIgnoreCase("logs")) {
                    def subPath = new File(subProjectPath, filename)
                    if (subPath.isDirectory()) {
                        for (File leafFile : subPath.listFiles()) {
                            leafFile.delete()
                        }
                    } else {
                        subPath.delete()
                    }
                }
            }
        }
    }

    defaultTasks "assemble"
}
